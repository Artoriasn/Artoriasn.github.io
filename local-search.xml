<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hbase Compaction实现(一)</title>
    <link href="/2020/07/16/Hbase-Compaction%E5%AE%9E%E7%8E%B0-%E4%B8%80/"/>
    <url>/2020/07/16/Hbase-Compaction%E5%AE%9E%E7%8E%B0-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Hbase-Compaction实现-一"><a href="#Hbase-Compaction实现-一" class="headerlink" title="Hbase Compaction实现(一)"></a>Hbase Compaction实现(一)</h1><blockquote><p>Hbase 中的用户数据在LSM体系架构中最终会形成一个一个小的HFile文件。我们知道，HFile小文件如果数量太多会导致读取低效。为了提高读取效率，LSM树体系架构设计了一个非常重要的模块：<strong>Compaction</strong>。Compaction 核心功能是将小文件合并成大文件，提升读取效率。</p></blockquote><h2 id="1-Compaction-基本工作原理"><a href="#1-Compaction-基本工作原理" class="headerlink" title="1. Compaction 基本工作原理"></a>1. Compaction 基本工作原理</h2><p>Compaction是从一个Region的Store中选择部分HFile文件进行合并。合并原理是，先从这些待合并的数据文件中依次读出KeyValue，再由小到大排序后写入一个新的文件。之后，这个新生成的文件就会取代之前已合并的所有文件对外提供服务。</p><p>Hbase 根据合并规模将Compaction分为两类：</p><ul><li><strong>Minor Compaction</strong>  是指选取部分小的，相邻的HFile，将他们合并成一个更大的HFile。</li><li><strong>Major Compaction</strong> 是指将一个Store中所有的HFile 合并成一个HFile,这个过程中还会完全清理三类无意义数据：被删除的数据，TTL过期数据，版本号超过设定版本号的数据。</li></ul><p>一般情况下，Major Compaction 持续时间比较长，整个过程会消耗大量的系统资源，对上层业务有比较大的影响。因此线上部分数据量比较大的业务通常推荐关闭自动触发Major Compaction 功能，改为在业务低峰期手动触发（或设置策略自动在低峰期触发）。</p><h2 id="2-Compaction-基本流程"><a href="#2-Compaction-基本流程" class="headerlink" title="2. Compaction 基本流程"></a>2. Compaction 基本流程</h2><p>Hbase 中Compaction 只有在特定的触发条件才会执行，比如部分flush操作完成之后（和lucene比较像），周期性的Compaction检查操作等。一旦触发，HBase会按照特定的流程执行Compaction。</p><p>![Hbase Compaction流程](/img/hbase/Hbase Compaction流程.png)</p>]]></content>
    
    
    
    <tags>
      
      <tag>hbase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft论文理解</title>
    <link href="/2020/06/26/Raft%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3/"/>
    <url>/2020/06/26/Raft%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
